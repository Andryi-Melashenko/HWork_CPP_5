#include <iostream>
template<class T>
class List1Side
{
	struct Node
	{
		T Data;
		Node* next;
		Node(const T& data, Node* n) :Data{ data }, next{ n }{};
	};
	int size;
	Node* head;
	Node* tail;
public:
	List1Side() :size{ 0 }, head{ nullptr }, tail{ nullptr }{};
	List1Side(T data, int s) :size{ s }
	{
		head = tail = new Node{ data, nullptr };
		Node* N = head;
		for (int i = 0; i < size; (i == 0 ? head->next = tail = new Node{ data,tail } : N->next = tail = new Node{ data,tail }), ++i);
	}
	void Add(T data)
	{
		if (head == nullptr)
		{
			tail = head = new Node{ data,nullptr };
		}
		else
		{
			Node* N = head;
			for (; N->next; N = N->next);
			N->next = tail = new Node{ data, nullptr };
		}
		++size;
	}
	void AddFront(T data)
	{
		if (head == nullptr)
		{
			tail = head = new Node{ data,nullptr };
			++size;
			return;
		}
		head = new Node{ data,head };
		++size;
	}
	void print()
	{
		Node* N = head;
		std::cout << "\n";
		for (; N; N = N->next)
		{
			std::cout << N->Data << "\n";
		}
	}
	T& operator [](int num)
	{
		Node* N = head;
		for (int i = 0; i < size and i < num and N->next; ++i, N = N->next) {
		}
		return N->Data;
	}
	T pop_back()
	{
		return tail->Data;
	}
	T pop_front()
	{
		if (head)
		{
			return head->Data;
		}
	}
	void delete_back()
	{
		if (tail != head)
		{
			Node* N = head;
			for (; N->next != tail; N = N->next);
			N->next = nullptr;
			delete tail;
			tail = N;
			--size;
		}
	}
	void delete_front()
	{
		if (!head)
		{
			return;
		}
		if (head->next != nullptr)
		{
			Node* N = head->next;
			delete head;
			head = N;
			--size;
			return;
		}
		if (head)
		{
			delete head;
			head = tail = nullptr;
			--size;
		}
	}
	int getSize()
	{
		return size;
	}
	friend T& operator +(List1Side& lhs, List1Side& rhs);
};
template<class T>
T& operator+ (List1Side<T>& lhs, List1Side<T>& rhs)
{
	List1Side<T> copy, work;
	work.AddFront(lhs.pop_front());
	for (; work; work = work->next)
	{
		copy.Add(work->data);
	}
	work.AddFront(rhs.pop_front());
	for (; work; work = work->next)
	{
		copy.Add(work->data);
	}
	return copy;
}

template <class T>
class MyStack
{
	List1Side<T> list;
public:
	MyStack(const T& copy) :list{ copy } {};
	MyStack() = default;
	void push(const T& copy)
	{
		list.AddFront(copy);
	}
	T& pop()
	{
		T copy = list.pop_front();
		list.delete_front();
		return copy;
	}
};
int main()
{
	MyStack<int> a;
	a.push(3);
	a.push(2);
	std::cout << a.pop();
	std::cout << a.pop();
}
