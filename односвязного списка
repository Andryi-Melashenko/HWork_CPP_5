#include <iostream>
template<class T>
class List1Side
{
	struct Node
	{
		T Data;
		Node* next;
		Node(const T& data, Node* n) :Data{ data }, next{ n }{};
	};
	int size;
	Node* head;
	Node* tail;
public:
	List1Side() :size{ 0 }, head{ nullptr }, tail{ nullptr }{};
	Node* copy()
	{
		Node* obj = head;
		List1Side copy;
		for (; obj; obj = obj->next)
		{
			copy.Add(obj->Data);
		}
		return copy.head;
	}
	List1Side(T data, int s) :size{ s }
	{
		head = tail = new Node{ data, nullptr };
		Node* N = head;
		for (int i = 0; i < size; (i == 0 ? head->next = tail = new Node{ data,tail } : N->next = tail = new Node{ data,tail }), ++i);
	}
	void Add(T data)
	{
		if (head == nullptr)
		{
			tail = head = new Node{ data,nullptr };
		}
		else
		{
			Node* N = head;
			for (; N->next; N = N->next);
			N->next = tail = new Node{ data, nullptr };
		}
		++size;
	}
	void AddFront(T data)
	{
		if (head == nullptr)
		{
			tail = head = new Node{ data,nullptr };
			++size;
			return;
		}
		head = new Node{ data,head };
		++size;
	}
	void print()
	{
		Node* N = head;
		std::cout << "\n";
		for (; N; N = N->next)
		{
			std::cout << N->Data << "\n";
		}
	}
	T& operator [](int num)
	{
		Node* N = head;
		for (int i = 0; i < size and i < num and N->next; ++i, N = N->next) {
		}
		return N->Data;
	}
	T pop_back()
	{
		return tail->Data;
	}
	T pop_front()
	{
		if (head)
		{
			return head->Data;
		}
	}
	void delete_back()
	{
		if (tail != head)
		{
			Node* N = head;
			for (; N->next != tail; N = N->next);
			N->next = nullptr;
			delete tail;
			tail = N;
			--size;
		}
	}
	void delete_front()
	{
		if (!head)
		{
			return;
		}
		if (head->next != nullptr)
		{
			Node* N = head->next;
			delete head;
			head = N;
			--size;
			return;
		}
		if (head)
		{
			delete head;
			head = tail = nullptr;
			--size;
		}
	}
	void  clean()
	{
		while (head)
		{
			delete_back();
		}
	}
	int getSize()
	{
		return size;
	}
	void operator = (List1Side<T> lhs)
	{
		clean();
		head = lhs.copy();
	}
	friend List1Side<T> operator +(List1Side& lhs, List1Side& rhs)
	{
		List1Side<T> copy;
		Node* work;
		work = lhs.head;
		for (; work; work = work->next)
		{
			copy.Add(work->Data);
		}
		work = rhs.head;
		for (; work; work = work->next)
		{
			copy.Add(work->Data);
		}
		return copy;
	}
	friend List1Side<T> operator *(List1Side& lhs, List1Side& rhs)
	{
		List1Side<T> copy;
		Node* work;
/*		work = lhs.head;
		for (; work; work = work->next)
		{
			copy.Add(work->Data);
		}*/
		work = lhs.head;
		for (; work; work = work->next)
		{
			for (Node* cc = rhs.head; cc; cc = cc->next)
			{
				if (cc->Data == work->Data)
				{
					copy.Add(work->Data);
				}
			}
		}		
		return copy;
	}
};
int main()
{
	List1Side<int> list1, list2, list3;
	list1.Add(1);
	list1.Add(2);
	list2.Add(2);
	list2.Add(1);
	list3 = list2 * list1;
	list3.print();
}
